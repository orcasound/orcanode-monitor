@page "{id}"
@model OrcanodeMonitor.Pages.NodeEventsModel
@{
    ViewData["Title"] = "Node Events";
}

<div class="text-center">
    <h1 class="display-4">@Model.NodeName</h1>

    <!-- Navigation Button -->
    <a href="@Url.Page("/SpectralDensity", new { id = Model.Id })" class="btn btn-primary" target="_blank" rel="noopener">
        View Most Recent Spectral Density
        <span class="visually-hidden">(opens in new tab)</span>
    </a>
    <p></p>

    <!-- Include Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

    <!-- Canvas for Chart.js -->
    <canvas id="uptimeChart" width="400" height="200"></canvas>
    <script>
        var ctx = document.getElementById('uptimeChart').getContext('2d');
        var dataplicityData = @Html.Raw(Model.JsonDataplicityData);
        var mezmoData = @Html.Raw(Model.JsonMezmoData);
        var hydrophoneStreamData = @Html.Raw(Model.JsonHydrophoneStreamData);
        var statusLabels = {
            0: 'Unconfigured',
            1: 'Down',
            2: 'Unintelligible',
            3: 'Up'
        };

        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: hydrophoneStreamData.map(e => new Date(e.Timestamp)),
                datasets: [
                    {
                        label: 'Dataplicity',
                        data: dataplicityData.map(e => e.StateValue),
                        backgroundColor: 'rgba(255, 99, 132, 0.2)',
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 1,
                        stepped: 'after'
                    },
                    {
                        label: 'Mezmo',
                        data: mezmoData.map(e => e.StateValue),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(0, 255, 0, 1)',
                        borderWidth: 1,
                        stepped: 'after'
                    },
                    {
                        label: 'Audio Stream',
                        data: hydrophoneStreamData.map(e => e.StateValue),
                        backgroundColor: 'rgba(54, 162, 235, 0.2)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 1,
                        stepped: 'after'
                    }
                ]
            },
            options: {
                scales: {
                    x: {
                        type: 'time',
                        time: {
                            unit: 'day',
                            tooltipFormat: 'MMM d, yyyy', // Format for the tooltip
                            displayFormats: {
                                minute: 'HH:mm',
                                hour: 'MMM d, HH:mm',
                                day: 'MMM d',
                                week: 'MMM d',
                                month: 'MMM yyyy',
                                quarter: 'MMM yyyy',
                                year: 'yyyy'
                            }
                        },
                        title: {
                            display: true,
                            text: 'Time'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'State'
                        },
                        ticks: {
                            stepSize: 1,
                            callback: function(value) {
                                return statusLabels[value] || value;
                            }
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                var value = context.raw;
                                return statusLabels[value] || value;
                            }
                        }
                    }
                }
            }
        });
    </script>

    <div>
        Uptime percentage:
        <span id="uptime-all-pastWeek" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("all", "pastWeek")%</span>
        <span id="uptime-hydrophoneStream-pastWeek" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("hydrophoneStream", "pastWeek")%</span>
        <span id="uptime-dataplicityConnection-pastWeek" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("dataplicityConnection", "pastWeek")%</span>
        <span id="uptime-mezmoLogging-pastWeek" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("mezmoLogging", "pastWeek")%</span>
        <span id="uptime-all-pastMonth" class="uptime-percentage">@Model.GetUptimePercentage("all", "pastMonth")%</span>
        <span id="uptime-hydrophoneStream-pastMonth" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("hydrophoneStream", "pastMonth")%</span>
        <span id="uptime-dataplicityConnection-pastMonth" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("dataplicityConnection", "pastMonth")%</span>
        <span id="uptime-mezmoLogging-pastMonth" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("mezmoLogging", "pastMonth")%</span>
        <span id="uptime-all-all" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("all", "all")%</span>
        <span id="uptime-hydrophoneStream-all" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("hydrophoneStream", "all")%</span>
        <span id="uptime-dataplicityConnection-all" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("dataplicityConnection", "all")%</span>
        <span id="uptime-mezmoLogging-all" class="uptime-percentage" style="display: none;">@Model.GetUptimePercentage("mezmoLogging", "all")%</span>
        <p></p>
    </div>

    <!-- Filter Buttons for Time Range -->
    <div>
        Filter by Time Range:
        <button id="btn-timeRange-pastWeek" class="btn unselected" onclick="updateFilter('timeRange', 'pastWeek')">Past Week</button>
        <button id="btn-timeRange-pastMonth" class="btn selected" onclick="updateFilter('timeRange', 'pastMonth')">Past Month</button>
        <button id="btn-timeRange-all" class="btn unselected" onclick="updateFilter('timeRange', 'all')">All</button>
        <p></p>
    </div>

    <!-- Filter Buttons for Type -->
    <div>
        Filter by Type:
        <button id="btn-type-all" class="btn selected" onclick="updateFilter('type', 'all')">All</button>
        <button id="btn-type-hydrophoneStream" class="btn unselected" onclick="updateFilter('type', 'hydrophoneStream')">Hydrophone Stream</button>
        <button id="btn-type-dataplicityConnection" class="btn unselected" onclick="updateFilter('type', 'dataplicityConnection')">Dataplicity Connection</button>
        <button id="btn-type-mezmoLogging" class="btn unselected" onclick="updateFilter('type', 'mezmoLogging')">Mezmo Logging</button>
        <p></p>
    </div>

    <table id="eventsTable" class="table">
        <thead>
            <tr>
                <th>Timestamp (Pacific)</th>
                <th align="left">Event</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (!Model.RecentEvents.Any())
            {
                <tr>
                    <td colspan="2" class="text-center">No events found for this time period.</td>
                </tr>
            }
            @foreach (Models.OrcanodeEvent item in Model.RecentEvents)
            {
                <tr class="@Model.GetEventClasses(item)">
                    <td>@item.DateTimeLocal.ToString("g")</td>
                    <td align="left">
                        @if (!string.IsNullOrEmpty(item.Url))
                        {
                            <a href="@item.Url">@item.Description</a>
                        }
                        else
                        {
                            <span>@item.Description</span>
                        }
                    </td>
                    <td>
                        <a href="@Url.Page("/SpectralDensity", new { id = item.ID })" class="btn selected" style="@Model.GetEventButtonStyle(item)" target="_blank" rel="noopener">
                            View Spectral Density
                            <span class="visually-hidden">(opens in new tab)</span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <script>
        var currentFilters = {
            timeRange: 'pastMonth',
            type: 'all' };

        function updateFilter(filterType, filterValue) {
            // Update time range filter.
            if (filterType == 'timeRange') {
                var oldTimeRangeButtonId = 'btn-timeRange-' + currentFilters.timeRange;
                var oldTimeRangeButton = document.getElementById(oldTimeRangeButtonId);
                oldTimeRangeButton.classList.remove('selected');
                oldTimeRangeButton.classList.add('unselected');

                currentFilters.timeRange = filterValue;

                var newTimeRangeButtonId = 'btn-timeRange-' + currentFilters.timeRange;
                var newTimeRangeButton = document.getElementById(newTimeRangeButtonId);
                newTimeRangeButton.classList.remove('unselected');
                newTimeRangeButton.classList.add('selected');
            }
            
            // Update type filter.
            if (filterType == 'type') {
                var oldTypeButtonId = 'btn-type-' + currentFilters.type;
                var oldTypeButton = document.getElementById(oldTypeButtonId);
                oldTypeButton.classList.remove('selected');
                oldTypeButton.classList.add('unselected');

                currentFilters.type = filterValue;

                var newTypeButtonId = 'btn-type-' + currentFilters.type;
                var newTypeButton = document.getElementById(newTypeButtonId);
                newTypeButton.classList.remove('unselected');
                newTypeButton.classList.add('selected');
            }

            filterTable();
            showUptimePercentage("uptime-" + currentFilters.type + "-" + currentFilters.timeRange);
        }

        function filterTable() {
            // Get all rows from the table.
            var rows = document.querySelectorAll('#eventsTable tbody tr');
            
            // Loop through each row.
            rows.forEach(function(row) {
                // Check if the row matches the selected time range and type
                var matchesTimeRange = (currentFilters.timeRange === 'all' || row.classList.contains(currentFilters.timeRange));
                var matchesType = (currentFilters.type === 'all' || row.classList.contains(currentFilters.type));
                
                if (matchesTimeRange && matchesType) {
                    row.style.display = ''; // Show matching rows.
                } else {
                    row.style.display = 'none'; // Hide non-matching rows.
                }
            });
        }

        function showUptimePercentage(id) {
            // Hide all uptime percentage elements.
            var elements = document.querySelectorAll('.uptime-percentage');
            elements.forEach(function(element) {
                element.style.display = 'none';
            });

            // Show the selected uptime percentage.
            document.getElementById(id).style.display = '';
        }
    </script>
</div>
