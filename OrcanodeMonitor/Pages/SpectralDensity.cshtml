@page "{id}"
@model OrcanodeMonitor.Pages.SpectralDensityModel
@{
    ViewData["Title"] = "Spectral Density";
}

<script src="https://cdn.jsdelivr.net/npm/mpegts.js@1.8.0/dist/mpegts.min.js"></script>
<div class="text-center">
    <h1 class="display-4">Spectral Density of Audio From @Model.NodeName</h1>
    As of: @Model.LastModifiedLocal (Pacific)<br />

    <!-- Include Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1"></script>

    <!-- Canvas for Chart.js -->
    @for (int i = 0; i < Model.ChannelCount; i++)
    {
        <canvas id="frequencyChart@(i + 1)" width="400" height="200"></canvas>
    }
    <script>
         // Client side function to initialize all charts.
        function initializeCharts2(labels, jsonChannelDatasets, jsonNonHumChannelDatasets, jsonHumChannelDatasets)
        {
            var maxSilenceDecibels = @Model.MaxSilenceDecibels;
            var minNoiseDecibels = @Model.MinNoiseDecibels;

            // Channel Count = @Model.ChannelCount

            @for (int i = 0; i < Model.ChannelCount; i++)
            {
                // We use GetChannelColor for line colors, not channels per se.
                string backgroundColor = Model.GetChannelColor(0, 0.2);
                string borderColor = Model.GetChannelColor(0, 1);
                string nonHumBackgroundColor = Model.GetChannelColor(1, 0.2);
                string nonHumBorderColor = Model.GetChannelColor(1, 1);
                string humBackgroundColor = Model.GetChannelColor(2, 0.2);
                string humBorderColor = Model.GetChannelColor(2, 1);
                string id = "frequencyChart" + (i + 1).ToString();

                @: initializeChart(
                @:     '@id',
                @:     labels,
                @:     jsonChannelDatasets[@i],
                @:     jsonNonHumChannelDatasets[@i],
                @:     jsonHumChannelDatasets[@i],
                @:     maxSilenceDecibels,
                @:     minNoiseDecibels,
                @:     @i,
                @:     '@backgroundColor',
                @:     '@borderColor',
                @:     '@nonHumBackgroundColor',
                @:     '@nonHumBorderColor',
                @:     '@humBackgroundColor',
                @:     '@humBorderColor'
                @: );
            }
        }

        function initializeCharts()
        {
            var labels = @Html.Raw(Json.Serialize(Model.Labels));
            var jsonChannelDatasets = @Html.Raw(Model.JsonChannelDatasets);
            var jsonNonHumChannelDataset = @Html.Raw(Model.JsonNonHumChannelDatasets);
            var jsonHumChannelDataset = @Html.Raw(Model.JsonHumChannelDatasets);
            initializeCharts2(labels, jsonChannelDatasets, jsonNonHumChannelDataset, jsonHumChannelDataset);
        }

        // Client side function to initialize a chart.
        function initializeChart(elementId, labels, jsonChannelDataset, jsonNonHumChannelDataset, jsonHumChannelDataset, maxSilenceDecibels, minNoiseDecibels, i, backgroundColor, borderColor, nonHumBackgroundColor, nonHumBorderColor, humBackgroundColor, humBorderColor)
        {
            var ctx = document.getElementById(elementId).getContext('2d');
            var myLineChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Channel ' + (i + 1),
                            data: jsonChannelDataset,
                            backgroundColor: backgroundColor,
                            borderColor: borderColor,
                            borderWidth: 1,
                            fill: "start",
                            hidden: true // This line will be hidden by default
                        },
                        {
                            label: 'Channel ' + (i + 1) + ' (excluding hum)',
                            data: jsonNonHumChannelDataset,
                            backgroundColor: nonHumBackgroundColor,
                            borderColor: nonHumBorderColor,
                            borderWidth: 1,
                            fill: "start",
                            hidden: false
                        },
                        {
                            label: 'Channel ' + (i + 1) + ' (humOnly)',
                            data: jsonHumChannelDataset,
                            backgroundColor: humBackgroundColor,
                            borderColor: humBorderColor,
                            borderWidth: 1,
                            fill: "start",
                            hidden: false
                        },
                        {
                            label: 'Max Silence Decibels',
                            data: [
                                { x: labels[0], y: maxSilenceDecibels },
                                { x: labels[labels.length - 1], y: maxSilenceDecibels }
                            ],
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 2,
                            fill: false,
                            pointRadius: 0 // Hide points on this line
                        },
                        {
                            label: 'Min Noise Decibels',
                            data: [
                                { x: labels[0], y: minNoiseDecibels },
                                { x: labels[labels.length - 1], y: minNoiseDecibels }
                            ],
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 2,
                            fill: false,
                            pointRadius: 0 // Hide points on this line
                        }
                    ]
                },
                options: {
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Frequency'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'dB'
                            }
                        }
                    }
                }
            });
            return myLineChart;
        }

        document.addEventListener('DOMContentLoaded', initializeCharts);
    </script>

    <div>
        <h2>Statistics</h2>
        # Channels: @Model.ChannelCount<br />

        <h3>Summary</h3>
        <p>
            Max magnitude: @Model.MaxMagnitude <br />
            Max magnitude outside hum range: @Model.MaxNonHumMagnitude <br />
            Total magnitude outside hum range: @Model.TotalNonHumMagnitude <br />
            Total magnitude of hum range: @Model.TotalHumMagnitude <br />
            Signal ratio: @Model.SignalRatio %<br />
            Average decibels outside hum range: @Model.AverageNonHumDecibels.ToString("F1") <br />
            Average decibels of hum: @Model.AverageHumDecibels.ToString("F1") <br />
            Status: @Model.Status <br />
        </p>
        @if (Model.ChannelCount > 1)
        {
            @for (int i = 0; i < Model.ChannelCount; i++)
            {
                <h3>Channel @(i + 1):</h3>
                <p>
                    Max magnitude: @Model.GetMaxMagnitude(i) <br />
                    Max magnitude outside hum range: @Model.GetMaxNonHumMagnitude(i) <br />
                    Total magnitude outside hum range: @Model.GetTotalNonHumMagnitude(i) <br />
                    Total magnitude of hum range: @Model.GetTotalHumMagnitude(i) <br />
                    Signal ratio: @Model.GetSignalRatio(i) %<br />
                    Average decibels outside hum range: @Model.GetAverageNonHumDecibels(i).ToString("F1") <br />
                    Average decibels of hum: @Model.GetAverageHumDecibels(i).ToString("F1") <br />
                    Status: @Model.GetStatus(i) <br />
                </p>
            }
        }

        <!-- Audio Button and Element -->
        <button id="playButton" onclick="playAudio('@Model.AudioUrl')">Play</button>
        <button id="stopButton" onclick="stopAudio()" style="display: none;">Stop</button>
        <audio id="audioElement" controls style="display:none;"></audio>
        <script>
            var player;

            function playAudio(url) {
                var audioElement = document.getElementById('audioElement');
                var playButton = document.getElementById('playButton');
                var stopButton = document.getElementById('stopButton');

                if (mpegts.getFeatureList().mseLivePlayback) {
                    console.log("mpegts.js is supported, playing " + url);
                    player = mpegts.createPlayer({
                        type: 'mse',
                        isLive: true,
                        url: url });
                    player.attachMediaElement(audioElement);
                    player.load();
                    player.play();

                    // Toggle buttons
                    playButton.style.display = 'none';
                    stopButton.style.display = 'inline-block';
                } else {
                    console.log("mpegts.js is not supported on this browser.");
                }
            }
            function stopAudio() {
                if (player) {
                    var playButton = document.getElementById('playButton');
                    var stopButton = document.getElementById('stopButton');

                    player.unload();
                    player.detachMediaElement();
                    player.destroy();
                    player = null;
                    console.log("Audio stopped and player cleaned up.");

                    // Toggle buttons
                    playButton.style.display = 'inline-block';
                    stopButton.style.display = 'none';
                } else {
                    console.log("No audio is currently playing.");
                }
            }
        </script>
        <p></p>
    </div>
</div>
