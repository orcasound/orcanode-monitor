@page "{id}"
@model OrcanodeMonitor.Pages.SpectralDensityModel
@{
    ViewData["Title"] = "Spectral Density";
}

<script src="https://cdn.jsdelivr.net/npm/mpegts.js@1.8.0/dist/mpegts.min.js"></script>
<div class="text-center">
    <h1 class="display-4">Spectral Density of Audio From @Model.NodeName</h1>
    As of: @Model.LastModified<br />

    <!-- Include Chart.js from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1"></script>

    <!-- Canvas for Chart.js -->
    <canvas id="frequencyChart" width="400" height="200"></canvas>
    <script>
        var ctx = document.getElementById('frequencyChart').getContext('2d');
        var myLineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: @Html.Raw(Json.Serialize(Model.Labels)),
                datasets: [
                    {
                        label: 'Audio Sample',
                        data: @Html.Raw(Model.JsonSummaryDataset),
                        backgroundColor: 'rgba(75, 192, 192, 0.2)',
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                    },
                    @if (Model.ChannelCount > 1)
                    {
                        for (int i = 0; i < Model.ChannelCount; i++)
                        {
                   @: {
                   @:     label: 'Channel @(i+1)',
                   @:     data: @Html.Raw(Model.JsonChannelDatasets[i]),
                   @:     backgroundColor: 'rgba(75, 192, 192, 0.2)',
                   @:     borderColor: 'rgba(75, 192, 192, 1)',
                   @:     borderWidth: 1
                   @: },
                        }
                    }
                    {
                        label: 'Max Noise Magnitude',
                        data: [
                            { x: @Html.Raw(Json.Serialize(Model.Labels[0])), y: @Html.Raw(Model.MaxSilenceMagnitude) },
                            { x: @Html.Raw(Json.Serialize(Model.Labels[Model.Labels.Count - 1])), y: @Html.Raw(Model.MaxSilenceMagnitude) }
                        ],
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 2,
                        fill: false,
                        pointRadius: 0 // Hide points on this line
                    },
                    {
                        label: 'Min Signal Magnitude',
                        data: [
                            { x: @Html.Raw(Json.Serialize(Model.Labels[0])), y: @Html.Raw(Model.MinNoiseMagnitude) },
                            { x: @Html.Raw(Json.Serialize(Model.Labels[Model.Labels.Count - 1])), y: @Html.Raw(Model.MinNoiseMagnitude) }
                        ],
                        borderColor: 'rgba(255, 99, 132, 1)',
                        borderWidth: 2,
                        fill: false,
                        pointRadius: 0 // Hide points on this line
                    }
                ]
            },
            options: {
                scales: {
                    x: {
                        title: {
                            display: true,
                            text: 'Frequency'
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Magnitude'
                        }
                    }
                }
            }
        });
    </script>

    <div>
        <h2>Statistics</h2>
        # Channels: @Model.ChannelCount<br />

        <h3>Summary</h3>
        <p>
            Max magnitude: @Model.MaxMagnitude <br />
            Max magnitude outside hum range: @Model.MaxNonHumMagnitude <br />
            Total magnitude outside hum range: @Model.TotalNonHumMagnitude <br />
            Total magnitude of hum range: @Model.TotalHumMagnitude <br />
            Signal ratio: @Model.SignalRatio %<br />
            Status: @Model.Status <br />
        </p>
        @if (Model.ChannelCount > 1)
        {
            @for (int i = 0; i < Model.ChannelCount; i++)
            {
                <p>Channel @i:</p>
                <p>
                    Max magnitude: @Model.GetMaxMagnitude(i) <br />
                    Max magnitude outside hum range: @Model.GetMaxNonHumMagnitude(i) <br />
                    Total magnitude outside hum range: @Model.GetTotalNonHumMagnitude(i) <br />
                    Total magnitude of hum range: @Model.GetTotalHumMagnitude(i) <br />
                    Signal ratio: @Model.GetSignalRatio(i) %<br />
                    Status: @Model.GetStatus(i) <br />
                </p>
            }
        }

        <!-- Audio Button and Element -->
        <button id="playButton" onclick="playAudio('@Model.AudioUrl')">Play</button>
        <button id="stopButton" onclick="stopAudio()" style="display: none;">Stop</button>
        <audio id="audioElement" controls style="display:none;"></audio>
        <script>
            var player;

            function playAudio(url) {
                var audioElement = document.getElementById('audioElement');
                var playButton = document.getElementById('playButton');
                var stopButton = document.getElementById('stopButton');

                if (mpegts.getFeatureList().mseLivePlayback) {
                    console.log("mpegts.js is supported, playing " + url);
                    player = mpegts.createPlayer({
                        type: 'mse',
                        isLive: true,
                        url: url });
                    player.attachMediaElement(audioElement);
                    player.load();
                    player.play();

                    // Toggle buttons
                    playButton.style.display = 'none';
                    stopButton.style.display = 'inline-block';
                } else {
                    console.log("mpegts.js is not supported on this browser.");
                }
            }
            function stopAudio() {
                if (player) {
                    var playButton = document.getElementById('playButton');
                    var stopButton = document.getElementById('stopButton');

                    player.unload();
                    player.detachMediaElement();
                    player.destroy();
                    player = null;
                    console.log("Audio stopped and player cleaned up.");

                    // Toggle buttons
                    playButton.style.display = 'inline-block';
                    stopButton.style.display = 'none';
                } else {
                    console.log("No audio is currently playing.");
                }
            }
        </script>
        <p></p>
    </div>
</div>
