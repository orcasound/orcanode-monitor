@page
@model IndexModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="text-center">
    <h1 class="display-4">Current State</h1>
    <p>
        Status as of: @Model.LastChecked
    </p>
    <table>
        <tr>
            <th>Type</th>
            <th>Location</th>
            <!--
            <th>Latest recorded</th>
            <th>Latest uploaded</th>
            <th>Manifest updated</th>
            <th>Last checked</th>
            -->
            <th><a href="https://www.dataplicity.com/app/" target="_blank">Dataplicity</a></th>
            <th>Agent Version</th>
            <th>SD Card Util.</th>
            <th><a href="https://live.orcasound.net/listen" target="_blank">Orcasound</a></th>
            <th>S3 Stream</th>
            <th><a href="https://aifororcas2.azurewebsites.net/hydrophones" target="_blank">OrcaHello</a></th>
            <th><a href="https://app.mezmo.com/313dbd82f3/logs/view" target="_blank">Mezmo</a></th>
        </tr>
    @foreach (Models.Orcanode item in Model.Nodes)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Type)
            </td>
            <td title="@Html.DisplayFor(modelItem => item.DataplicityDescription)">
                @Html.DisplayFor(modelItem => item.DisplayName)
            </td>
            <!--
            <td>
                @Html.DisplayFor(modelItem => item.LatestRecordedLocal)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LatestUploadedLocal)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ManifestUpdatedLocal)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastCheckedLocal)
            </td>
            -->
            <td style="background-color: @Model.NodeDataplicityBackgroundColor(item)">
                <a asp-page="/DataplicityNode" asp-route-serial="@item.DataplicitySerial" style="color: @Model.NodeDataplicityTextColor(item)" target="_blank">
                    @Html.DisplayFor(modelItem => item.DataplicityConnectionStatus)
                </a>
            </td>
            <td style="background-color: @Model.NodeDataplicityUpgradeColor(item)">
                @Html.DisplayFor(modelItem => item.AgentVersion)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DiskUsedInGigs)/@Html.DisplayFor(modelItem => item.DiskCapacityInGigs)G
                (@Html.DisplayFor(modelItem => item.DiskUsagePercentage)%)
            </td>
            @if (item.OrcasoundStatus == Models.OrcanodeOnlineStatus.Absent)
            {
                <td style="background-color: @Model.NodeOrcasoundBackgroundColor(item); color: @Model.NodeOrcasoundTextColor(item)">
                    @Html.DisplayFor(modelItem => item.OrcasoundStatus)
                </td>
            }
            else
            {
                <td style="background-color: @Model.NodeOrcasoundBackgroundColor(item)">
                    <a href="https://@Html.DisplayFor(modelItem => item.OrcasoundHost)/listen/@Html.DisplayFor(modelItem => item.OrcasoundSlug)" style="color: @Model.NodeOrcasoundTextColor(item)" target="_blank">
                        @Html.DisplayFor(modelItem => item.OrcasoundStatus)
                    </a>
                </td>
            }
            @if (item.S3StreamStatus == Models.OrcanodeOnlineStatus.Absent)
            {
                    <td style="background-color: @Model.NodeS3BackgroundColor(item); color: @Model.NodeS3TextColor(item)">
                    @Html.DisplayFor(modelItem => item.S3StreamStatus)
                </td>
            }
            else
            {
                <td style="background-color: @Model.NodeS3BackgroundColor(item)">
                    <a href="https://open.quiltdata.com/b/@item.S3Bucket/tree/@item.S3NodeName/" style="color: @Model.NodeS3TextColor(item)" target="_blank">
                        @Html.DisplayFor(modelItem => item.S3StreamStatus)
                    </a>
                </td>
            }
            @if (item.OrcaHelloStatus == Models.OrcanodeOnlineStatus.Absent)
            {
                    <td style="background-color: @Model.NodeOrcaHelloBackgroundColor(item); color: @Model.NodeOrcaHelloTextColor(item)">
                    @Html.DisplayFor(modelItem => item.OrcaHelloStatus)
                </td>
            }
            else
            {
                <td style="background-color: @Model.NodeOrcaHelloBackgroundColor(item)">
                    <a href="https://aifororcas2.azurewebsites.net/hydrophones" style="color: @Model.NodeOrcaHelloTextColor(item)" target="_blank">
                        @Html.DisplayFor(modelItem => item.OrcaHelloStatus)
                    </a>
                </td>
            }
            @if (item.MezmoStatus == Models.OrcanodeOnlineStatus.Absent)
            {
                    <td style="background-color: @Model.NodeMezmoBackgroundColor(item); color: @Model.NodeMezmoTextColor(item)">
                    @Html.DisplayFor(modelItem => item.MezmoStatus)
                </td>
            }
            else
            {
                <td style="background-color: @Model.NodeMezmoBackgroundColor(item)">
                    <a href="https://app.mezmo.com/313dbd82f3/logs/view?hosts=@Html.DisplayFor(modelItem => item.S3NodeName)" style="color: @Model.NodeMezmoTextColor(item)" target="_blank">
                        @Html.DisplayFor(modelItem => item.MezmoStatus)
                    </a>
                </td>
            }
        </tr>
    }
    </table>
    <p/>
    <h4 style="text-align: left;">Legend</h4>
    <ul style="text-align: left;">
        <li>
            <b>Dataplicity Absent</b>: Dataplicity does not know about the node.
        </li>
        <li>
            <b>Dataplicity Offline</b>: Dataplicity connection is down.
        </li>
        <li>
            <b>Dataplicity Online</b>: Dataplicity connection is up.
        </li>
        <li>
            <b>Orcasound Absent</b>: orcasound.net does not know about the node.
        </li>
        <li>
            <b>Orcasound Hidden</b>: orcasound.net knows about but does not display the node.
        </li>
        <li>
            <b>Orcasound Online</b>: orcasound.net knows about the node.
        </li>
        <li>
            <b>S3 Stream Absent</b>: No latest.txt file exists on S3 for this node.
        </li>
        <li>
            <b>S3 Stream Offline</b>: No recent audio is on S3.
        </li>
        <li>
            <b>S3 Stream Online</b>: Audio stream is working normally.
        </li>
        <li>
            <b>S3 Stream Unauthorized</b>: Access denied when trying to check the audio stream.
        </li>
        <li>
            <b>S3 Stream Unintelligible</b>: Audio stream is being sent to S3 but it appears to be bad.
        </li>
        <li>
            <b>OrcaHello Absent</b>: OrcaHello does not know about the node.
        </li>
        <li>
            <b>OrcaHello Online</b>: OrcaHello knows about the node.
        </li>
        <li>
            <b>Mezmo Absent</b>: Mezmo does not know about the node.
        </li>
        <li>
            <b>Mezmo NoView</b>: Mezmo has no view configured for the node.
        </li>
        <li>
            <b>Mezmo Offline</b>: Mezmo has no recent log entries for the node.
        </li>
        <li>
            <b>Mezmo Online</b>: Mezmo knows about the node.
        </li>
    </ul>
    <p/>
    <h1 class="display-4"><a href="/api/ifttt/v1/triggers/nodestateevents">Recent State Events</a></h1>
    <table>
        <tr>
            <th>Timestamp</th>
            <th>Event</th>
        </tr>
        @foreach (Models.OrcanodeEvent item in Model.RecentEvents)
        {
            <tr>
                <td>
                    @item.DateTimeLocal
                </td>
                <td>
                    @item.Description
                </td>
            </tr>
        }
    </table>
 </div>
